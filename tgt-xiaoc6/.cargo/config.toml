[target.'cfg(all(target_arch = "riscv32", target_os = "none"))']
runner = "espflash flash --monitor"
rustflags = ["-C", "link-arg=-Tlinkall.x", "-C", "force-frame-pointers"]

[alias]
run = "cargo run --release"

[build]
target = "riscv32imac-unknown-none-elf"

rustflags = [
  # GNU LD
  # "-C", "link-arg=-Wl,-Tlinkall.x",
  # "-C", "link-arg=-nostartfiles",

  # LLD
  "-C",
  "link-arg=-Tlinkall.x",
  "-C",
  "linker=rust-lld",
]

# rustflags = [
#   "-C", "link-arg=-Tlinkall.x",
#   # TODO: Explain
#   "-C", "link-arg=-Trom_functions.x",
#   # Required to obtain backtraces (e.g. when using the "esp-backtrace" crate.)
#   # NOTE: May negatively impact performance of produced code
#   "-C", "force-frame-pointers",

#   # comment the cfgs below if you do _not_ wish to emulate atomics.
#   # enable the atomic codegen option for RISCV
#   "-C", "target-feature=+a",
#   # tell the core library have atomics even though it's not specified in the target definition
#   "--cfg", "target_has_atomic_load_store",
#   "--cfg", 'target_has_atomic_load_store="8"',
#   "--cfg", 'target_has_atomic_load_store="16"',
#   "--cfg", 'target_has_atomic_load_store="32"',
#   "--cfg", 'target_has_atomic_load_store="ptr"',
#   # enable cas
#   "--cfg", "target_has_atomic",
#   "--cfg", 'target_has_atomic="8"',
#   "--cfg", 'target_has_atomic="16"',
#   "--cfg", 'target_has_atomic="32"',
#   "--cfg", 'target_has_atomic="ptr"',
# ]

[env]
# DEFMT_LOG = "debug"
ESP_LOG = "info"
ESP_WIFI_CONFIG_COUNTRY_CODE = "AU"
ESP_WIFI_CONFIG_COUNTRY_CODE_OPERATING_CLASS = "0x21"
